#include<iostream>  
#include<conio.h> 
#include<dos.h>
#include<stdlib.h>
#include<string.h>
#include <windows.h>   
#include <time.h>

using namespace std;

/*
 main global veriables 
 
 */

char H[] = "?????";   //characters used to create the handle 
int i;               // i declared here to use inside all the for loops 
int speed ;          //to specify the difficulty of the game by changing the speed 



HANDLE console = GetStdHandle(STD_OUTPUT_HANDLE);
COORD CursorPosition;   //cordinate of character cell in the console screen   ( a structure )


void xy_coord(int x, int y) {

   /*
   --to set the cursor position in a disired location 
   --data structures has been used in here 
  */
   
   
  CursorPosition.X = x;      //memeber x of the structure CursorPosition
  CursorPosition.Y = y;      //memeber y of the structure CursorPosition
  SetConsoleCursorPosition(console, CursorPosition);
  
}


void cursor_visibility (bool visible, DWORD size) 
{
	/*
	
	--Used to to hide the cursour while playing the game
	--set bool visible = 0 - invisible
	--bool visible = 1 - visible
	--DWORD 32-bit unsigned integer size is always positive
	
	*/
		
  if (size == 0) {
    size = 20;       // default cursor size Changing to numbers from 1 to 20, decreases cursor width
  }
  CONSOLE_CURSOR_INFO lpCursor;      //calss .. ipcursor is the object 
  lpCursor.bVisible = visible;       //bvisible  .. boolean value 
  lpCursor.dwSize = size;
  SetConsoleCursorInfo(console, & lpCursor);     // ipCursor has passed in as a reference
}


void printBorder() { 

	/*
	--Printing the border
	*/
	

  for (i = 2; i <= 79; i++) {    //printing the border horizontally 
    xy_coord(i, 1);
    cout << '-';
    xy_coord(i, 25);
    cout << '-';
  }
  for (i = 1; i <= 25; i++) {    //printing the border vertically 
    xy_coord(2, i);   
    cout << '|';
    xy_coord(79, i);
    cout << '|';
  }
}



void dificulty() {
	
	/* user can chose the dificulty 

	1. easy - speed( 70 )
	2. medium - speed ( 40 )
	3. hard - speed ( 30 )
	
	speed = sleep time of the while loop ;
	
	*/
	
	void gameplay();
	void main_menu();
	system("cls");  
	printBorder();
	xy_coord(4, 3);
    cout << "DIFICULTY";
    xy_coord(4, 4);
    cout << "-------------";
    xy_coord(4, 6);
    cout << "1 - EASY";
    xy_coord(4, 8);
    cout << "2 - MEDIUM";
    xy_coord(4, 10);
    cout << "3 - HARD";
    
    char s = getch(); //s - temporary holding the user input 
    
    if (s == '1' ){
		speed = 70 ;
	}
	else if (s == '2') {
		speed = 40 ;
	}
	else if (s == '3'){
		speed = 30 ;
	}
	else 
	{
		main_menu(); 
	}
	
	gameplay();	
	
}



void set_game() {
	/*
	
	--priting the game window 
	--both handles and controlling tab
	
	*/
	
  system("cls");     //to clear the screen or console window of commands and any output generated by them.
  printBorder();     //printing the border 
  
  xy_coord(4, 3);
  cout << "SCORE : 0";
  xy_coord(50, 3);
  cout << "Press Esc key to quit game";     
  for (i = 3; i <= 78; i++) {
    xy_coord(i, 4);
    cout << '-';
  }
  
  /*
  
  --printing the handles 
  
  */
  
  for (i = 0; i <= strlen(H); i++) {   //H = ?????
    xy_coord(5, 5 + i);
    cout << H[i];
  }                                                 
  for (i = 0; i <= strlen(H); i++) {
    xy_coord(76, 5 + i);
    cout << H[i];
  }
}




void gameplay() {
	
	 /*
  
  --contain the main while loop 
  --the main function that handles all the ball movements as well as the handel movements in each loop cycle
  --confine the action inside the game window
  --determinig the score as well
  --getting user inputs and act acordingly 
  
  */
  
  set_game();
  void main_menu(); //predefined here 
  
  int score = 0, pause_play = 0, start = 1;   //start - only used in the intial movement   // pause_play = 0 -  you have paused the game , pause_play = 1 -  you continue the game  // score - to count the score
  int a = 5, b = 5; 
  int x = 73, y = 6 + rand() % 15;  //y - will determine where the ball start to bounce ... random number will genarate from 6 to 21    //x is the boundry 
  int d = rand() % 2 ;             //d - posible values for d is ( 0 and 1 )  if d =  0 to the lower left side ... if d = 1 to the upper left side ...
  int px, py;                     // px ,py - (x,y) cordinates of the ball
  int on_play = 1, go = 1;       // on_play - if on_play = 1 - game is on  , on_play = 0 - lost the game)    // go = 0 ball isn't moving , go = 1 ball is moving 
  
  int lls = 0, uls = 0, urs = 0, lrs = 0;    //lls - lower left side  ; uls - upper left side ; urs - upper right side ; lrs - lower right side 

  while (true) {
  	
    if (go == 1) {
      while (!kbhit() && on_play) {    //kbhit() is present in conio. h and used to determine if a key has been pressed or not
        int d = rand() % 2;
        px = x;  //  x is the boundry 
        py = y;  //  y is a randomly genarated position ( 6 - 21 )
        xy_coord(x, y);   // initially putting the ball in x , y position 
        cout << "O";
        Sleep(speed);       //function suspends the execution of the program for a specified period of time
        xy_coord(x, y);
        cout << " ";
        
        
        
		/*
		
		only run once at the beginig to decide where the ball is heading 
		
		*/
		
        if (start == 1) {
          start = 0;               
          
          if (d == 0) {			  //d = 0 means the direction of the ball is to  lower left side
            x--;                 
            y++;                 //lower left side
          } else {               // d = 1 means the direction of the ball is to  upper left side
            x--;                 
            y--;				//upper left side
          }
        }
        
        
        /*
        
        --all four directions where ball can possibly go inside the gamewindow 
        
        --lls  - lower left side;
        --uls  - upper left side;
        --urs  - upper right side;
        --lrs  - lower right side;
        
        
        */
        
        

        if (lls) {
          x--;                     //move the ball to lower left side
          y++;
        }
        if (uls) {
          x--;                     //move the ball to upper left side
          y--;
        }
        if (urs) {
          x++;                    //move the ball to upper right side
          y--;
        }
        if (lrs) {
          x++;                   //move the ball to lower right side 
          y++;
        }
        
        
        /*   confining the ball inside the game window 
        
            --   y =  5 is the celing 
            --   x =  6 is the boundary on the left side 
            --   y =  24 is the floor 
            --   x =  75 is the boundary on the right side
            
           ( in each of these cases we have to handle two situations in order to confine the ball inside the game window )
           ( in total mainly we have 8 cases to handle in order to keep the ball move inside the gamewindow )
            
            */
            
            

        if (x < px && y > py) lls = 1;    //for go to lower left  ( x < px  and y > py )
        if (x < px && y < py) uls = 1;    //for go to upper left ( x < px and y < py )
        
		// when the ball is at the celing 
		
		if (y == 5 && uls) {             //and if still ball is trying go upper left 
          lls = 1;                      //set the direction to the lower left 
          uls = 0;                    
        }
        
         if (y == 5 && urs) {           //and if still ball is trying go upper right 
          lrs = 1;						//set the direction to the lower right 
          urs = 0;
        }
        
        //when the ball is at the floor 
        
        if (y == 24 && lls) {          //and if still ball is trying go lower left 
          uls = 1;					   //set the direction to the upper left
          lls = 0;
        }
        if (y == 24 && lrs) {		  //and if still ball is trying go lower right 
          urs = 1;					  //set the direction to the upper right
          lrs = 0;
        }
        
        //when the ball is at the left wall 
        
        if (x == 6 && uls) {		//and if still ball is trying go upper left 
          urs = 1;					//set the direction to the upper right
          uls = 0;
        }
        if (x == 6 && lls) {        //and if still ball is trying go lower left
          lrs = 1;				   //set the direction to the lower right
          lls = 0;
        }
        
        //when the ball is at the right wall 
        
        if (x == 75 && lrs) {		 //and if still ball is trying go lower right
          lls = 1;					 //set the direction to the lower left
          lrs = 0;
        }
        if (x == 75 && urs) {        //and if still ball is trying go upper right 
          uls = 1;				   	//set the direction to the upper left
          urs = 0;
        }
        
        
		
		/*
		
			when the ball is at the coners of the gamewindow 
			
			*/
		
        if (x == 75 || x == 6) {
          Sleep(50);
        }
        if (y == 5 || y == 24) {
          Sleep(50);
        }
        
        
        

        if (urs || lrs) {
          if (y >= 6 && y <= 22) {
            if (y > b + strlen(H) - 3) {     // b = 5  ; strlen = 5 ;   we always reseve y ( 1 - 5 ) from the upper to the control menu 
              xy_coord(76, b + strlen(H));
              cout << "|";
              xy_coord(76, b);
              if (b != 4) cout << ' ';
              b++;
            }
            
            
            if (y < b + strlen(H) - 3) {
              xy_coord(76, b);
              cout << "|";
              xy_coord(76, b + strlen(H));
              if (b + strlen(H) != 25) cout << ' ';
              b--;
            }
          }
        }
        
        /*
         
          ---- Handling the losing situation  -----  
         
         -- there is only one case where player got to lose 
         -- if the ball hits the left wall we consider player to be lost  
         
         
         */
        

        if (x == 6 && (y < a || y > a + strlen(H) - 1)) {    //check wheather the ball hit the handle 
          xy_coord(22, 12);
          cout << "YOU LOSE ! Press 'r' or ENTER to play again !";
          on_play = 0;   //on play  = 0 
          break;
        }
	
		/*
		
		updating the score  
		
		*/
		
        if (x == 6 && on_play == 1) {
          xy_coord(4, 3);
          cout << "SCORE : " << ++score;
        }

      }
    }   //end of the if ( go == 1 )
    
    
    
    /*
    
    geetting inputs from the key bord 
    
    */
    

    char ch = getch();       //temporary holding the output in the ch variable 

	//pausing the game 
	
    if (ch == ' ' && on_play == 1) {
      pause_play = 1;        //game is paused  pause play = 1 
      go = 0;        //the ball is no longer moving 
      xy_coord(22, 12);
      cout << "GAME PAUSED ! PRESS ENTER to continue !";
    }
    
    //continuing the game 
    
    if (ch == 13 && pause_play == 1 && on_play == 1) {          // pause until the user press enter 
      pause_play = 0;     //game isn't paused
      go = 1;     //the ball is on the move agian 
      xy_coord(22, 12);
      cout << "                                       ";
    }
    
    //restart the game
    
    if ((ch == 'r' || ch == 'R' || ch == 13) && on_play == 0) {      
      on_play = 1;
      dificulty() ;
      break;
    }
    
    //moving the handle down
    
    if ((ch == 's' || ch == 'S' || ch == 80) && a <= 19 && on_play) {     
      xy_coord(5, a + strlen(H));
      cout << "?";     // moving the handle down by putting a '?' at the bottom of the handle and putting a space on the top
      xy_coord(5, a);
      cout << ' ';
      a++;
    }
    
    //moving the handle up
    
    if ((ch == 'w' || ch == 'W' || ch == 72 ) && a >= 6 && on_play ){     
      xy_coord(5, a - 1);
      cout << "?";    // moving the handle up by putting a '?' at the top of the handle and putting a space on the bottom
      xy_coord(5, a + 4);
      cout << ' ';
      a--;
    }
    
    //exist from the game 
    
    if (ch == 27) {       
      main_menu();
      break;
    }
  }      //end of the main while loop 
}







void main_menu() {    

	 /*
  
  --the main menu which the user confront when he enter to the game 
  --function which cordinates all other functions 
  
  */

  system("cls");             
  void help_window();      //we are defining htwindow here cus we are going to use in in the bottom of this function 
  
  int cp = 1;
  xy_coord(34, 4);
  cout << "PING PONG";
  for (i = 8; i <= 73; i++) {
    xy_coord(i, 6);
    cout << '-';
  }
  xy_coord(34, 10);
  cout << "1. PLAY THE GAME";
  xy_coord(34, 12);
  cout << "2. HOW TO PLAY";
  xy_coord(34, 14);
  cout << "3. EXIT";
  xy_coord(14, 16);
  cout << "Enter Option from Menu: ";

  char on_play = getch();
  if (on_play == '1') dificulty();   //when you press 1 this will direct you to the gameplay 
  if (on_play == '2') help_window();  //when you press 2 this will direct you to help window 
  if (on_play == '3') exit(0);     //when you press 3 this will end the program 

}





void help_window() {
	
	 /*
  
  --The how to play window 
  
  */
  
  system("cls");          
  printBorder();
  xy_coord(4, 3);
  cout << "INSTRUCTIONS";
  xy_coord(4, 4);
  cout << "-------------";
  xy_coord(4, 5);
  cout << "- Press w or Up Arrow to move up.";
  xy_coord(4, 7);
  cout << "- Press s or Down Arrow to move down.";
  xy_coord(4, 9);
  cout << "- Press Spacebar to pause the game.";
  xy_coord(4, 11);
  cout << "- Press Esc to quit the game.";
  xy_coord(4, 15);
  cout << "Press any key to go to menu ...";
  getch();        //Using getch() function, we can hide the input character provided by the users 
  main_menu();  //if you press any key this will direct you to the main menu 
  
}






int main() {
	
  cursor_visibility(0, 0);  //hiding the cursor 
  srand((unsigned) time(NULL));   //used to intialise the PRNG(Pseudo-Random Number Generator)  
  system("cls");  //clearing the window 

  main_menu(); 

  return 0;
}
